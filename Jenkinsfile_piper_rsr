#!/usr/bin/env groovy

@Library('muenchhausen') _
//@Library('piper-lib') _

try {
    // pull request voting
    if (env.BRANCH_NAME.startsWith('PR')) {
        stage('Pull-request voting') {
            node {
                deleteDir()
                checkout scm

                setupPipelineEnvironment script: this, storeGithubStatistics: false

                measureDuration(script: this, measurementName: 'voter_duration') {
                    executeDocker(dockerImage: 'docker.wdf.sap.corp:50000/piper/maven', dockerWorkspace: '/home/piper') {
                        sh 'mvn --batch-mode clean install'
                    }

                    publishCheckResults archive: true, tasks: true, pmd: true, cpd: true, findbugs: true, checkstyle: true, aggregation: [thresholds: [fail: [high: 0]]]
                    publishTestResults junit: [updateResults: true, archive: true], jacoco: [archive: true]
                }
            }
        }
    // master pipeline
    } else if (env.BRANCH_NAME == 'master') {
        stage('Central Build') {
            lock(resource: "${env.JOB_NAME}/10", inversePrecedence: true) {
                milestone 10
                node {
                    deleteDir()
                    checkout scm

                    setupPipelineEnvironment script: this, storeGithubStatistics: true

                    measureDuration(script: this, measurementName: 'build_duration') {
                        setVersion script: this, buildTool: 'maven'
                        stashFiles(script: this) {
                            executeBuild script: this, buildType: 'xMakeStage'
                        }
                        publishCheckResults archive: true, tasks: true, pmd: true, cpd: true, findbugs: true, checkstyle: true, aggregation: [thresholds: [fail: [high: 0]]]
                        publishTestResults junit: [updateResults: true, archive: true], jacoco: [archive: true]
                    }
                }
            }
        }
stage('Integration') {
            lock(resource: "${env.JOB_NAME}/30", inversePrecedence: true) {
                milestone 30
                node {
                    ////custom integration tests
                    //if (!globalPipelineEnvironment.getConfigProperty('extensionIntegrationTestScript').isEmpty()) {
                    //    deleteDir()
                    //    executeCustomIntegrationTests script: this
                    //}
                    deleteDir()
                    measureDuration(script: this, measurementName: 'deploy_test_duration') {
                        downloadArtifactsFromNexus script: this, artifactType: 'java', fromStaging: true
                        //deployToCloudFoundry script: this, useCAM: false, deployTool: 'cf_native'
                        //executeHealthCheck testUrl: globalPipelineEnvironment.getConfigProperty('healthCheckUrlAcceptance')
                    }
                    
                }
            }
        }

        /*
        stage('Acceptance') {
            lock(resource: "${env.JOB_NAME}/40", inversePrecedence: true) {
                milestone 40
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'deploy_test_duration') {
                        downloadArtifactsFromNexus script: this, artifactType: 'java', fromStaging: true
                        deployToCloudFoundry script: this, useCAM: false, deployTool: 'cf_native'
                        executeHealthCheck testUrl: globalPipelineEnvironment.getConfigProperty('healthCheckUrlAcceptance')
                    }
                    if (globalPipelineEnvironment.getConfigProperty('runFunctionalAcceptanceTests').toBoolean()) {
                        measureDuration(script: this, measurementName: 'gauge_duration') {
                            executeGaugeTests script: this
                            publishTestResults gauge: [archive: true], allowUnstableBuilds: false
                        }
                    }
                }
            }
        }
        */
        
        stage('Promote') {
            //input message: 'Shall we proceed to promotion & release?'
            lock(resource: "${env.JOB_NAME}/80", inversePrecedence: true) {
                milestone 80
                node {
                    deleteDir()
                    measureDuration(script: this, measurementName: 'promote_duration') {
                        executeBuild script: this, buildType: 'xMakePromote'
                    }
                }
            }
        }
        
        stage('Release') {
            lock(resource: "${env.JOB_NAME}/90", inversePrecedence: true) {
                milestone 90
                node {
                    measureDuration(script: this, measurementName: 'release_duration') {
                        deleteDir()
                        downloadArtifactsFromNexus script: this, artifactType: 'java'
                        //deployToCloudFoundry script: this, deployTool: 'cf_native', deployType: 'blue-green', cfApiEndpoint: globalPipelineEnvironment.getConfigProperty('cfProdApiEndpoint'), cfOrg: globalPipelineEnvironment.getConfigProperty('cfProdOrg'), cfSpace: globalPipelineEnvironment.getConfigProperty('cfProdSpace'), cfManifest: globalPipelineEnvironment.getConfigProperty('cfProdManifest')
                        //executeHealthCheck testUrl: globalPipelineEnvironment.getConfigProperty('healthCheckUrlProduction')
                        //currentBuild.result = 'SUCCESS'
                    }
                }
            }
}
        
    }

} catch (Throwable err) { // catch all exceptions
    globalPipelineEnvironment.addError(this, err)
    throw err
} finally {
    node{
        writeInflux script: this
        sendNotificationMail script: this
    }
}

